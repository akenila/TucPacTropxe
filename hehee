def open_capcut():
    try:
        # Check if Capcut is already running
        # Capcut is not running, launch it
        capcut_path = os.getenv("LOCALAPPDATA") + r"\CapCut\Apps\CapCut.exe"    
        subprocess.Popen(capcut_path)
        print("Opening Capcut...")
        while True:
            try:
                capcut_windows = gw.getWindowsWithTitle("CapCut")
                if capcut_windows:
                    break
                time.sleep(1)
            except:
                pass
        capcut_window = gw.getWindowsWithTitle("CapCut")[0]
        capcut_window.activate()
        capcut_window.maximize()

        time.sleep(5)  # Wait for Capcut to open
        
        return True
        
    except Exception as e:
        print(f"Error with Capcut: {e}")
        return False

def launch_capcut(capcut_path=None):
    """Launch CapCut application"""
    print("Launching CapCut...")
    
    if capcut_path and os.path.exists(capcut_path):
        # Launch using direct path
        try:
            subprocess.Popen(capcut_path)
            print(f"Launched CapCut from path: {capcut_path}")
            capcut = gw.getWindowsWithTitle("CapCut")[0]
            capcut.activate()
            capcut.maximize()
            time.sleep(5)  # Wait for CapCut to open
            return True
        except Exception as e:
            print(f"Error launching CapCut from path: {e}")
            # Fall back to Windows search method
    
    # Windows search method (fallback)
    pyautogui.press('win')
    time.sleep(1)
    pyautogui.write('CapCut')
    time.sleep(1)
    pyautogui.press('enter')
    time.sleep(5)  # Wait for CapCut to open
def search_and_open_project(project_name):
    """Search for a project by name and open it"""
    print(f"Searching for project: {project_name}")
    
    # Click on search icon
    try:
        search_img = pyautogui.locateCenterOnScreen('assets/search.png', confidence=0.7)
        pyautogui.click(search_img)
    except Exception:
        screen_width, screen_height = pyautogui.size()
        project = pyautogui.click(screen_width * 0.87, screen_height * 0.23)
    
    # Type project name
    time.sleep(1)
    pyautogui.hotkey('ctrl', 'a')  # Select all (clear any existing text)
    pyautogui.press('delete')
    pyperclip.copy(project_name)
    pyautogui.hotkey('ctrl', 'v')  # Paste project name
    time.sleep(2)
    
    # Click on the project to open it
    screen_width, screen_height = pyautogui.size()
    try:
        # Tìm vị trí trung tâm của ảnh
        center = pyautogui.locateCenterOnScreen('assets/project.png', confidence=0.7)
        if center:
            # Tính toán vị trí mới
            new_x = center.x
            new_y = center.y + 50
            # Click vào vị trí mới
            pyautogui.click(new_x, new_y)
            print(f"Clicked at offset position: ({new_x}, {new_y})")
    except Exception as e:
        print(f"Error locating or clicking on image: {e}")
    
    print(f"Project opened: {project_name}")
    time.sleep(3)  # Wait for project to open
    return True

def export_project():
    """Click on export button and wait for export to complete"""
    print("Starting export process...")
    time.sleep(2)  # Small pause before export
    
    # Click on export icon
    try:
        export = pyautogui.locateCenterOnScreen('assets/export.png', confidence=0.7)
        pyautogui.click(export)
    except Exception:
        print("Could not find export icon")
        return False
    time.sleep(2)  # Wait for export window to open
    print("Starting export...")
    
    
    screen_width, screen_height = pyautogui.size()
    project = pyautogui.click(screen_width * 0.6, screen_height * 0.76)
    time.sleep(2)  # Wait for export window to open
    print("Export started")
    
    while True:
        try:
            export = pyautogui.locateCenterOnScreen('assets/export_success.png', confidence=0.7)
            time.sleep(5)  # Wait for export to complete
            break
        except Exception:
            pass
    screen_width, screen_height = pyautogui.size()
    cancel = pyautogui.click(screen_width * 0.65, screen_height * 0.76)
    time.sleep(2)  # Small pause after export
    print("Export completed")
    return True


def close_project():
    """Close the current project"""
    print("Closing project...")
    
    # Click on back/close button
    try:
        close = pyautogui.locateCenterOnScreen('assets/menu.png', confidence=0.7)
        pyautogui.click(close)
    except Exception:
        print("Could not find close icon")
        return False
    
    time.sleep(2)  # Wait for close confirmation
    try:
        close = pyautogui.locateCenterOnScreen('assets/back_home.png', confidence=0.7)
        pyautogui.click(close)
    except Exception:
        print("Could not find close icon")
        return
    
    time.sleep(2)  # Wait for project to close
    print("Project closed")
    return True

def process_projects(project_list, capcut_path=None):
    """Process a list of projects one by one"""
    open_capcut()
    time.sleep(5)  # Wait for CapCut to be fully loaded
    
    for i, project_name in enumerate(project_list):
        print(f"\n[{i+1}/{len(project_list)}] Processing project: {project_name}")
        
        if not search_and_open_project(project_name):
            print(f"Failed to open project: {project_name}, skipping to next")
            continue
        
        if not export_project():
            print(f"Failed to export project: {project_name}")
        
        if not close_project():
            print(f"Failed to close project: {project_name}")
            # Emergency close attempt
            pyautogui.hotkey('alt', 'f4')
            time.sleep(2)
        
        print(f"Completed processing project: {project_name}")
        time.sleep(2)  # Small pause between projects

def get_projects_from_path():
    """Get projects from the CapCut directory"""
    capcut_path = os.getenv("LOCALAPPDATA") + r"\CapCut"
    projects_path = capcut_path + r"\User Data\Projects\com.lveditor.draft"
    
    if not os.path.exists(projects_path):
        print(f"Error: Projects path not found at {projects_path}")
        return []
    
    # Get valid projects
    all_projects = [p for p in os.listdir(projects_path) 
                    if p not in ['.recycle_bin', 'root_meta_info.json']]
    # Tìm các dự án cần đổi tên do xung đột prefix
    projects_to_rename = []  # Lưu danh sách các dự án cần đổi tên (là prefix của dự án khác)
    
    # Sắp xếp dự án theo độ dài (ngắn đến dài) để kiểm tra prefix
    sorted_projects = sorted(all_projects, key=len)
    
    # Kiểm tra xem có dự án nào là prefix của dự án khác không
    for i, proj1 in enumerate(sorted_projects):
        for proj2 in sorted_projects[i+1:]:
            # Kiểm tra nếu proj1 là prefix của proj2 (không phân biệt hoa thường)
            if proj2.lower().startswith(proj1.lower()):
                projects_to_rename.append(proj1)
                break
    
    # In thông tin về các dự án cần đổi tên
    if projects_to_rename:
        print(f"Cần đổi tên {len(projects_to_rename)} dự án để đảm bảo tìm kiếm duy nhất:")
        for proj in projects_to_rename:
            print(f"  - {proj}")
        
        # Thực hiện đổi tên chỉ các dự án có xung đột
        projects = []
        for p in all_projects:
            if p in projects_to_rename:
                # Thêm timestamp cho các dự án có xung đột
                timestamp = int(time.time())
                new_name = f"{p}_{timestamp}"
                os.rename(os.path.join(projects_path, p), os.path.join(projects_path, new_name))
                projects.append(new_name)
                print(f"Đã đổi tên: {p} -> {new_name}")
            else:
                # Giữ nguyên tên các dự án không có xung đột
                projects.append(p)
    else:
        print("Tất cả dự án đã đảm bảo tìm kiếm duy nhất, không cần đổi tên.")
        projects = all_projects
    return all_projects, projects_path

# Redirect stdout to the log window
def redirect_stdout_to_widget(widget):
    class StdoutRedirector:
        def __init__(self, text_widget):
            self.text_widget = text_widget
            self.buffer = ""
        
        def write(self, string):
            self.buffer += string
            self.text_widget.config(state=tk.NORMAL)
            self.text_widget.insert(tk.END, string)
            self.text_widget.see(tk.END)
            self.text_widget.config(state=tk.DISABLED)
            
        def flush(self):
            pass
    
    return StdoutRedirector(widget)

# GUI Functions
def load_projects():
    """Load projects and display them in the project frame"""
    # Clear existing projects
    for widget in project_frame.winfo_children():
        widget.destroy()
        
    project_vars.clear()
    
    # Get projects
    all_projects, _ = get_projects_from_path()
    
    if not all_projects:
        print("No projects found.")
        return
    
    # Add checkboxes for each project
    for i, project in enumerate(all_projects):
        var = tk.BooleanVar(value=False)
        project_vars.append((project, var))
        
        chk = ttk.Checkbutton(project_frame, text=project, variable=var)
        chk.grid(row=i, column=0, sticky=tk.W, padx=5, pady=2)
    
    # Enable start button
    start_btn.config(state=tk.NORMAL)
    print(f"Loaded {len(all_projects)} projects.")

def on_frame_configure(event):
    """Update the scrollregion when the inner frame changes size"""
    canvas.configure(scrollregion=canvas.bbox("all"))

def on_canvas_configure(event):
    """Resize the inner frame when the canvas changes size"""
    canvas.itemconfig(canvas_frame, width=event.width)

def start_processing():
    """Start processing selected projects"""
    selected_projects = [project for project, var in project_vars if var.get()]
    
    if not selected_projects:
        print("No projects selected.")
        return
    
    print(f"Starting to process {len(selected_projects)} projects...")
    start_btn.config(state=tk.DISABLED)
    load_btn.config(state=tk.DISABLED)
    
    # Start processing in a separate thread
    def process_thread():
        try:
            capcut_path = os.getenv("LOCALAPPDATA") + r"\CapCut"
            process_projects(selected_projects, capcut_path)
            print("Processing complete.")
            try:
                capcut_windows = gw.getWindowsWithTitle("CapCut")
                for window in capcut_windows:
                    window.close()
            except:
                pass
        except Exception as e:
            print(f"Error during processing: {str(e)}")
        finally:
            # Re-enable buttons when done
            root.after(0, lambda: start_btn.config(state=tk.NORMAL))
            root.after(0, lambda: load_btn.config(state=tk.NORMAL))
    
    threading.Thread(target=process_thread, daemon=True).start()

def on_mousewheel(event):
    """Handle mousewheel scrolling with proper boundary checks"""
    # Get current scroll position
    current_pos = canvas.yview()
    
    # Calculate scroll direction (positive = down, negative = up)
    direction = -1 * (event.delta/120)
    
    # Check boundaries before scrolling
    if direction < 0 and current_pos[0] <= 0:
        # Already at top - don't scroll up further
        return
    elif direction > 0 and current_pos[1] >= 1.0:
        # Already at bottom - don't scroll down further
        return
        
    # Perform the scroll if we're not at boundaries
    canvas.yview_scroll(int(direction), "units")

if __name__ == "__main__":
    # Create the main window
    root = tk.Tk()
    root.title("Project Exporter")
    root.geometry("800x600")
    
    # Main frame
    main_frame = ttk.Frame(root, padding="10")
    main_frame.pack(fill=tk.BOTH, expand=True)
    
    # Button frame
    btn_frame = ttk.Frame(main_frame)
    btn_frame.pack(fill=tk.X, pady=5)
    
    # Store project variables
    project_vars = []
    
    # Load Projects button
    load_btn = ttk.Button(btn_frame, text="Load Projects", command=load_projects)
    load_btn.pack(side=tk.LEFT, padx=5)
    
    # Start button (disabled initially)
    start_btn = ttk.Button(btn_frame, text="Start", command=start_processing, state=tk.DISABLED)
    start_btn.pack(side=tk.LEFT, padx=5)
    
    # Project selection frame with label
    ttk.Label(main_frame, text="Select Projects to Export:").pack(anchor=tk.W, pady=(10,5))
    
    # Create a frame for the projects list with scrollbar
    project_frame_outer = ttk.Frame(main_frame, borderwidth=1, relief=tk.SUNKEN)
    project_frame_outer.pack(fill=tk.BOTH, expand=True, pady=5)
    
    # Add canvas and scrollbar for scrolling
    canvas = tk.Canvas(project_frame_outer)
    scrollbar = ttk.Scrollbar(project_frame_outer, orient=tk.VERTICAL, command=canvas.yview)
    canvas.configure(yscrollcommand=scrollbar.set)
    
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
    canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
    
    # Inner frame for projects (will be placed on canvas)
        # Inner frame for projects (will be placed on canvas)
    project_frame = ttk.Frame(canvas)
    canvas_frame = canvas.create_window((0, 0), window=project_frame, anchor=tk.NW)
    
    # Configure canvas to resize with frame
    project_frame.bind("<Configure>", on_frame_configure)
    canvas.bind("<Configure>", on_canvas_configure)
    
    canvas.bind("<Enter>", lambda e: canvas.bind_all("<MouseWheel>", on_mousewheel))
    canvas.bind("<Leave>", lambda e: canvas.unbind_all("<MouseWheel>"))
    # Log output frame with label
    ttk.Label(main_frame, text="Log:").pack(anchor=tk.W, pady=(10,5))
    
    # Read-only log text area
    log_text = scrolledtext.ScrolledText(main_frame, wrap=tk.WORD, height=10)
    log_text.pack(fill=tk.BOTH, expand=True, pady=5)
    log_text.config(state=tk.DISABLED)
    
    # Redirect stdout to log window
    sys.stdout = redirect_stdout_to_widget(log_text)
    
    # Start the GUI
    root.mainloop()
